name: build-test-deploy

on: [push, pull_request]

jobs:

# building and testing tasks

  build-test-windows:
    uses: ./.github/workflows/reusable-build-test.yml
    with:
      runs-on: windows-latest
  build-test-linux:
    uses: ./.github/workflows/reusable-build-test.yml
    with:
      runs-on: ubuntu-latest
  build-test-macos:
    uses: ./.github/workflows/reusable-build-test.yml
    with:
      runs-on: macos-latest
      
# publishing tasks
      
  publish-windows-cli:
    needs: build-test-windows
    uses: ./.github/workflows/reusable-cli-deploy.yml
    with:
      runs-on: windows-latest
      rid: "win-x64"
  publish-linux-cli:
    needs: build-test-linux
    uses: ./.github/workflows/reusable-cli-deploy.yml
    with:
      runs-on: ubuntu-latest
      rid: "linux-x64"
  publish-macos-cli:
    needs: build-test-macos
    uses: ./.github/workflows/reusable-cli-deploy.yml
    with:
      runs-on: macos-latest
      rid: "osx-x64"

# experimental

  read-version:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        run: |
          echo "Directory.Build.props content:"
          cat "Directory.Build.props"
          echo "Select-XML output:"
          echo "$(Select-XML -Path "Directory.Build.props" -XPath "//VersionSuffix").Node.InnerText"
          echo "version=$(Select-XML -Path "Directory.Build.props" -XPath "//VersionSuffix").Node.InnerText" >> $GITHUB_OUTPUT
          echo "$GITHUB_OUTPUT content:"
          cat "$GITHUB_OUTPUT"
        shell: pwsh
      - name: Print Version
        run: |
          echo "steps.version.outputs.version context:"
          echo "${{ steps.version.outputs.version }}"
          if ($VERSION) {
            echo "The version is $VERSION"
          } else {
            echo "Empty"
          }
        env:
          VERSION: ${{ steps.version.outputs.version }}
#       - name: Read Version
#         id: version
#         run: |
#           echo "suffix=$(Select-XML -Path "Directory.Build.props" -XPath "//VersionSuffix").Node.InnerText" >> $GITHUB_OUTPUT
#         env:
#           VERSION: ${{ steps.version.outputs.suffix }}
#       - name: Print Version
#         run: echo "suffix is ${{ steps.version.outputs.suffix }}"
        
#         |
#           if ($VERSION) {
#             echo "The version is $VERSION"
#           } else {
#             echo "Empty"
#           }


