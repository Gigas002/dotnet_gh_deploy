name: test
on:
  workflow_dispatch:
   inputs:
      runs-on:
        description: 'The operating system to run the job on'
        required: true
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest
      projects:
        description: 'Array of projects to test'
        required: true
        type: string
      dotnet-version:
        description: 'dotnet sdk version'
        required: false
        type: string
        default: '9.x'
      upload-coverage:
        description: 'Should upload coverage report?'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      runs-on:
        description: 'The operating system to run the job on'
        required: true
        type: string
      projects:
        description: 'Array of projects to test'
        required: true
        type: string
      dotnet-version:
        description: 'dotnet sdk version'
        required: false
        type: string
        default: '9.x'
      upload-coverage:
        description: 'Should upload coverage report?'
        required: false
        type: boolean
        default: false
 
jobs:

  test:
    runs-on: ${{inputs.runs-on}}
    defaults:
      run:
        shell: pwsh
    env:
      project-name: ''
      now: ''   
    strategy:
      matrix:
        project: ${{fromJson(inputs.projects)}}
    steps:
        - uses: actions/checkout@v5
       
        - name: set-env
          run: |
            $projectName = Split-Path -Path "${{matrix.project}}" -Leaf -Resolve | Split-Path -LeafBase
            $now = Get-Date -Format yyyymmddHHmmssfff
            Write-Output "project-name=$projectName" >> $env:GITHUB_ENV
            Write-Output "now=$now" >> $env:GITHUB_ENV

        - name: dotnet-setup
          uses: actions/setup-dotnet@v5
          with:
            dotnet-version: ${{inputs.dotnet-version}}

        - name: dotnet-restore
          run: dotnet restore "${{matrix.project}}"
        
        - name: dotnet-build
          run: dotnet build "${{matrix.project}}" --tl --no-restore -c Release
        
        - name: dotnet-test
          run: dotnet test "${{matrix.project}}" --no-restore -c Release --collect "XPlat Code Coverage;SkipAutoProps=true"
        
        - name: upload-artifact
          if: ${{inputs.upload-coverage == true}}
          uses: actions/upload-artifact@v4
          with:
            name: coverage-${{env.project-name}}-${{env.now}}
            path: ${{env.project-name}}/TestResults/**/*.xml
            retention-days: 1

  codecov:
    needs: test
    if: ${{inputs.upload-coverage == true}}
    runs-on: ${{inputs.runs-on}}
    steps:
      - uses: actions/checkout@v5

      - name: download-artifacts
        uses: actions/download-artifact@v5
        with:
          path: coverage
      
      - name: codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: coverage/**/*.xml
