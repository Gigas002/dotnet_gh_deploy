name: deploy
on:
  workflow_call:
    inputs:
      runs-on:
        description: 'The operating system to run the job on'
        required: true
        type: string
      publish-path:
        description: 'Base path to publish artifact'
        required: true
        type: string
      gh-nuget-source:
        description: 'Source to publish nuget package on github feed'
        required: true
        type: string
    secrets:
      NUGET_API_KEY:
        required: true
        
jobs:

  test-set-rid:
    runs-on: ${{inputs.runs-on}}
    defaults:
      run:
        shell: pwsh
    env:
      rid: ''
    steps:
      - uses: actions/checkout@v3
      
      - name: set-rid
        run: |
          if (${{inputs.runs-on == 'ubuntu-latest'}})
            echo 'rid=linux-x64' >> $env:GITHUB_ENV
          elseif (${{inputs.runs-on == 'windows-latest'}})
            echo 'rid=win-x64' >> $env:GITHUB_ENV
          else
            echo 'rid=osx-x64' >> $env:GITHUB_ENV
            
      - name: echo-rid
        run: echo '${{env.rid}}'
  
  deploy:
    runs-on: ${{inputs.runs-on}}
    defaults:
      run:
        shell: pwsh
    env:
      rid: ''
    steps:
      - uses: actions/checkout@v3
      
      - name: Set rid for ubuntu
        if: ${{inputs.runs-on == 'ubuntu-latest'}}
        run: echo 'rid=linux-x64' >> $env:GITHUB_ENV
      - name: Set rid for windows
        if: ${{inputs.runs-on == 'windows-latest'}}
        run: echo 'rid=win-x64' >> $env:GITHUB_ENV
      - name: Set rid for macos
        if: ${{inputs.runs-on == 'macos-latest'}}
        run: echo 'rid=osx-x64' >> $env:GITHUB_ENV
        
      - name: read-version
        id: read-version
        uses: ./.github/actions/read-version
      - name: dotnet-setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
          
      - name: dotnet-publish
        run: dotnet publish 'Deploy.Cli/Deploy.Cli.csproj' -c Release -r ${{env.rid}} -o '${{inputs.publish-path}}/${{env.rid}}' --sc false
      - name: zip-artifacts
        run: Compress-Archive -Path '${{inputs.publish-path}}/${{env.rid}}/*' -Destination '${{inputs.publish-path}}/${{env.rid}}.zip'
        
      - name: dotnet-build
        run: dotnet build -c Release
        
      - name: dotnet-pack-release
        if: steps.read-version.outputs.suffix == ''
        run: dotnet pack "Deploy.Core/Deploy.Core.csproj" -c Release -o "${{inputs.publish-path}}/Nupkg" --no-build
      - name: dotnet-pack-continious
        if: steps.read-version.outputs.suffix != ''
        run: dotnet pack "Deploy.Core/Deploy.Core.csproj" -c Release -o "${{inputs.publish-path}}/Nupkg" --no-build --version-suffix ci-${{steps.read-version.outputs.build}}
      
      - name: push-nuget-nupkg
        run: |
          foreach($file in (Get-ChildItem '${{inputs.publish-path}}/' -Recurse -Include *.nupkg))
          {
              dotnet nuget push $file -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate
          }
      - name: push-github-nupkg
        run: |
          foreach($file in (Get-ChildItem '${{inputs.publish-path}}/' -Recurse -Include *.nupkg))
          {
              dotnet nuget push $file -k ${{secrets.GITHUB_TOKEN}} -s 'https://nuget.pkg.github.com/${{inputs.gh-nuget-source}}/index.json' -ss 'https://nuget.pkg.github.com/${{inputs.gh-nuget-source}}/index.json' --skip-duplicate
          }

      - name: deploy-release
        if: steps.read-version.outputs.suffix == ''
        uses: ./.github/actions/deploy-release
        with:
          rid: ${{env.rid}}
          version: ${{steps.read-version.outputs.prefix}}
          gh-token: ${{secrets.GITHUB_TOKEN}}
          publish-path: ${{inputs.publish-path}}
          
      - name: deploy-continious
        if: steps.read-version.outputs.suffix != ''
        uses: ./.github/actions/deploy-continious
        with:
          rid: ${{env.rid}}
          gh-token: ${{secrets.GITHUB_TOKEN}}
          publish-path: ${{inputs.publish-path}}
        
